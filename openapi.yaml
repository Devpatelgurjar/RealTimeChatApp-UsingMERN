openapi: 3.1.0
info:
  title: RealTimeChatApp API
  description: API for the RealTimeChatApp, managing users and chat messages in real-time.
  version: 1.0.0
  license:
    name: MIT
    url: "https://opensource.org/license/mit/"
servers:
  - url: http://localhost:5000/api  # Replace with your production URL (e.g., https://realtimechatapp.com/api) if deployed
    description: Local development server
paths:
  /api/users:
    get:
      summary: Get all users
      description: Retrieve a list of all registered users.
      operationId: getUsers
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    username:
                      type: string
        '404':
          description: Users not found
  /api/users/{id}:
    get:
      summary: Get user by ID
      description: Retrieve details of a specific user by their ID.
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the user
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  username:
                    type: string
                  email:
                    type: string
                    format: email
        '404':
          description: User not found
  /api/messages:
    post:
      summary: Send a new message
      description: Create a new chat message.
      operationId: createMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                senderId:
                  type: string
                  format: uuid
                receiverId:
                  type: string
                  format: uuid
                content:
                  type: string
              required:
                - senderId
                - receiverId
                - content
      responses:
        '201':
          description: Message created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  content:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
        '400':
          description: Invalid request
  /api/messages/{id}:
    get:
      summary: Get message by ID
      description: Retrieve a specific message by its ID.
      operationId: getMessageById
      parameters:
        - name: id
        - in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the message
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  senderId:
                    type: string
                    format: uuid
                  content:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
        '404':
          description: Message not found
  /api/status:
    get:
      summary: Check server status
      description: Returns the current status of the server (dummy endpoint for testing).
      operationId: getStatus
      responses:
        '200':
          description: Server is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "running"
                  uptime:
                    type: string
                    format: date-time
        '503':
          description: Server unavailable
  /api/test:
    post:
      summary: Test API endpoint
      description: A dummy endpoint to test API functionality (returns a test response).
      operationId: postTest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                testData:
                  type: string
                  example: "test123"
              required:
                - testData
      responses:
        '200':
          description: Test successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Test received: test123"
                  timestamp:
                    type: string
                    format: date-time
        '400':
          description: Invalid test data
  /api/chatrooms:
    post:
      summary: Create a new chat room
      description: Creates a new chat room for users to communicate.
      operationId: createChatRoom
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                userIds:
                  type: array
                  items:
                    type: string
                    format: uuid
              required:
                - name
                - userIds
      responses:
        '201':
          description: Chat room created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  name:
                    type: string
                  createdAt:
                    type: string
                    format: date-time
        '400':
          description: Invalid request
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []